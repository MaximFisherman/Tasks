class StemmerPorter {
private:
	static const string EMPTY;
	static const string S1;
	static const string S13;
	static const string SN;
	static const string const1;
	static const regex PERFECTIVEGROUND;
	static const regex REFLEXIVE;
	static const regex ADJECTIVE;
	static const regex PARTICIPLE;
	static const regex VERB;
	static const regex NOUN;
	static const regex I;
	static const regex P;
	static const regex NN;
	static const regex DERIVATIONAL;
	static const regex DER;
	static const regex SUPERLATIVE;

public:
	StemmerPorter();
	string get(string s);
};

const string StemmerPorter::const1 = "¿≈»Œ”€›»ﬁﬂ";
const string StemmerPorter::EMPTY = "";
const string StemmerPorter::S1 = "$1";
const string StemmerPorter::S13 = "$1$3";
const string StemmerPorter::SN = "Õ";
const regex StemmerPorter::PERFECTIVEGROUND = regex("(»¬|»¬ÿ»|»¬ÿ»—‹|€¬|€¬ÿ»|€¬ÿ»—‹|¬ÿ»|¬ÿ»—‹)$");
const regex StemmerPorter::REFLEXIVE = regex("(—ﬂ|—‹)$");
const regex StemmerPorter::ADJECTIVE = regex("(≈≈|»≈|€≈|Œ≈|»Ã»|€Ã»|≈…|»…|€…|Œ…|≈Ã|»Ã|€Ã|ŒÃ|≈√Œ|Œ√Œ|≈Ã”|ŒÃ”|»’|€’|”ﬁ|ﬁﬁ|¿ﬂ|ﬂﬂ|Œﬁ|≈ﬁ)$");
const regex StemmerPorter::PARTICIPLE = regex("(.*)(»¬ÿ|€¬ÿ|”ﬁŸ)$|([¿ﬂ])(≈Ã|ÕÕ|¬ÿ|ﬁŸ|Ÿ)$");
const regex StemmerPorter::VERB = regex("(.*)(»À¿|€À¿|≈Õ¿|≈…“≈|”…“≈|»“≈|»À»|€À»|≈…|”…|»À|€À|»Ã|€Ã|≈Õ|»ÀŒ|€ÀŒ|≈ÕŒ|ﬂ“|”≈“|”ﬁ“|»“|€“|≈Õ€|»“‹|€“‹|»ÿ‹|”ﬁ|ﬁ)$|([¿ﬂ])(À¿|Õ¿|≈“≈|…“≈|À»|…|À|≈Ã|Õ|ÀŒ|ÕŒ|≈“|ﬁ“|Õ€|“‹|≈ÿ‹|ÕÕŒ)$");
const regex StemmerPorter::NOUN = regex("(¿|≈¬|Œ¬|»≈|‹≈|≈|»ﬂÃ»|ﬂÃ»|¿Ã»|≈»|»»|»|»≈…|≈…|Œ…|»…|…|»ﬂÃ|ﬂÃ|»≈Ã|≈Ã|¿Ã|ŒÃ|Œ|”|¿’|»ﬂ’|ﬂ’|€|‹|»ﬁ|‹ﬁ|ﬁ|»ﬂ|‹ﬂ|ﬂ)$");
const regex StemmerPorter::I = regex("»$");
const regex StemmerPorter::P = regex("‹$");
const regex StemmerPorter::NN = regex("ÕÕ$");
const regex StemmerPorter::DERIVATIONAL = regex(".*[^¿≈»Œ”€›ﬁﬂ]+[¿≈»Œ”€›ﬁﬂ].*Œ—“‹?$");
const regex StemmerPorter::DER = regex("Œ—“‹?$");
const regex StemmerPorter::SUPERLATIVE = regex("(≈…ÿ≈|≈…ÿ)$");

StemmerPorter::StemmerPorter() {
	setlocale(0, "");
}
string StemmerPorter::get(string s) {
	transform(s.begin(), s.end(), s.begin(), ::toupper);
	replace(s.begin(), s.end(), '®', '≈');
	int k = 0;
	size_t pos = s.find_first_of(const1, 0);
	if (pos != string::npos) {
		string pre = s.substr(0, pos + 1);
		string rv = s.substr(pos + 1);
		string temp = regex_replace(rv, PERFECTIVEGROUND, EMPTY);
		if (rv.size() != temp.size()) {
			rv = temp;
		}
		else {
			rv = regex_replace(rv, REFLEXIVE, EMPTY);
			temp = regex_replace(rv, ADJECTIVE, EMPTY);
			if (rv.size() != temp.size()) {
				rv = temp;
				rv = regex_replace(rv, PARTICIPLE, S13);
			}
			else {
				temp = regex_replace(rv, VERB, S13);
				if (rv.size() != temp.size()) {
					rv = temp;
				}
				else {
					rv = regex_replace(temp, NOUN, EMPTY);
				}
			}
		}
		rv = regex_replace(rv, I, EMPTY);
		if (regex_match(rv, DERIVATIONAL)) {
			rv = regex_replace(rv, DER, EMPTY);
		}
		temp = regex_replace(rv, P, EMPTY);
		if (temp.length() != rv.length()) {
			rv = temp;
		}
		else {
			rv = regex_replace(rv, SUPERLATIVE, EMPTY);
			rv = regex_replace(rv, NN, SN);
		}
		s = pre + rv;
	}
	transform(s.begin(), s.end(), s.begin(), tolower);
	return s;
}



//Using 
int main()
{
StemmerPorter sp;
std::cout << sp.get("¿Î„ÓËÚÏ˚") << std::endl;
}
